# scripts/setup_prefect.py
"""
Script de configuration et d√©ploiement Prefect
Configure l'environnement Prefect pour le pipeline ETL ABI
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from datetime import datetime, timedelta

def install_prefect():
    """Installe Prefect si n√©cessaire"""
    try:
        import prefect
        print(f"‚úÖ Prefect d√©j√† install√© (version: {prefect.__version__})")
        return True
    except ImportError:
        print("üì¶ Installation de Prefect...")
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "prefect==2.14.21", "prefect-sqlalchemy==0.4.1"])
            print("‚úÖ Prefect install√© avec succ√®s")
            return True
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur lors de l'installation de Prefect: {e}")
            return False

def setup_prefect_workspace():
    """Configure l'espace de travail Prefect"""
    try:
        from prefect.client.orchestration import get_client
        from prefect.server.schemas.schedules import CronSchedule
        
        print("üîß Configuration de l'espace de travail Prefect...")
        
        # Cr√©er le r√©pertoire de travail si n√©cessaire
        work_dir = Path("prefect_workspace")
        work_dir.mkdir(exist_ok=True)
        
        print("‚úÖ Espace de travail Prefect configur√©")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la configuration: {e}")
        return False

def create_deployment_config():
    """Cr√©e la configuration de d√©ploiement"""
    deployment_config = {
        "name": "abi-etl-pipeline",
        "version": "1.0.0",
        "description": "Pipeline ETL ABI avec orchestration Prefect",
        "tags": ["etl", "abi", "business-intelligence"],
        "parameters": {
            "config_path": "config/config.yaml",
            "skip_validation": False
        },
        "work_queue_name": "abi-etl-queue",
        "schedule": {
            "cron": "0 2 * * *",  # Tous les jours √† 2h du matin
            "timezone": "Europe/Paris"
        },
        "infrastructure": {
            "type": "process",
            "env": {
                "PYTHONPATH": str(Path.cwd()),
                "ETL_ENV": "production"
            }
        }
    }
    
    config_file = Path("deployments/abi_etl_deployment.json")
    config_file.parent.mkdir(exist_ok=True)
    
    with open(config_file, 'w') as f:
        json.dump(deployment_config, f, indent=2)
    
    print(f"‚úÖ Configuration de d√©ploiement sauvegard√©e: {config_file}")
    return deployment_config

def create_prefect_deployment():
    """Cr√©e un d√©ploiement Prefect"""
    try:
        from prefect import deploy
        from flows.prefect_etl_flows import abi_etl_pipeline_flow
        
        print("üöÄ Cr√©ation du d√©ploiement Prefect...")
        
        # D√©ploiement principal
        deployment = abi_etl_pipeline_flow.to_deployment(
            name="abi-etl-daily",
            description="Pipeline ETL ABI ex√©cut√© quotidiennement",
            tags=["etl", "abi", "production", "daily"],
            parameters={
                "config_path": "config/config.yaml",
                "skip_validation": False
            },
            work_queue_name="abi-etl-queue",
            cron="0 2 * * *",  # Tous les jours √† 2h du matin
        )
        
        # D√©ployer
        deployment_id = deploy(deployment)
        print(f"‚úÖ D√©ploiement cr√©√© avec succ√®s - ID: {deployment_id}")
        
        return deployment_id
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du d√©ploiement: {e}")
        return None

def create_monitoring_dashboard():
    """Cr√©e un tableau de bord de monitoring simple"""
    dashboard_html = """
<!DOCTYPE html>
<html>
<head>
    <title>ABI ETL Pipeline - Monitoring Dashboard</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }
        .header { background-color: #2563eb; color: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
        .card { background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .status { padding: 10px; border-radius: 4px; margin: 10px 0; }
        .status.success { background-color: #d1fae5; color: #065f46; }
        .status.warning { background-color: #fef3c7; color: #92400e; }
        .status.error { background-color: #fee2e2; color: #991b1b; }
        .metric { display: inline-block; margin: 10px 20px 10px 0; }
        .metric-value { font-size: 2em; font-weight: bold; color: #2563eb; }
        .metric-label { font-size: 0.9em; color: #6b7280; }
        .links { margin-top: 20px; }
        .links a { color: #2563eb; text-decoration: none; margin-right: 20px; }
        .links a:hover { text-decoration: underline; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üè¢ ABI ETL Pipeline</h1>
        <p>Monitoring Dashboard - Business Intelligence Data Pipeline</p>
    </div>
    
    <div class="card">
        <h2>üìä Pipeline Status</h2>
        <div class="status success">
            ‚úÖ Pipeline configur√© et pr√™t √† l'ex√©cution
        </div>
        <div class="status warning">
            ‚ö†Ô∏è Monitoring en temps r√©el disponible via Prefect UI
        </div>
    </div>
    
    <div class="card">
        <h2>üîó Liens Utiles</h2>
        <div class="links">
            <a href="http://127.0.0.1:4200" target="_blank">üéõÔ∏è Prefect UI</a>
            <a href="http://127.0.0.1:4200/flows" target="_blank">üîÑ Flows</a>
            <a href="http://127.0.0.1:4200/deployments" target="_blank">üöÄ D√©ploiements</a>
            <a href="http://127.0.0.1:4200/work-queues" target="_blank">üìã Queues</a>
        </div>
    </div>
    
    <div class="card">
        <h2>üìù Instructions</h2>
        <ol>
            <li><strong>D√©marrer Prefect Server:</strong> <code>prefect server start</code></li>
            <li><strong>D√©marrer Worker:</strong> <code>prefect worker start --pool default-agent-pool</code></li>
            <li><strong>Ex√©cuter Pipeline:</strong> <code>python -m flows.prefect_etl_flows</code></li>
            <li><strong>Surveiller:</strong> Ouvrir <a href="http://127.0.0.1:4200">Prefect UI</a></li>
        </ol>
    </div>
    
    <div class="card">
        <h2>‚öôÔ∏è Configuration</h2>
        <p><strong>Queue:</strong> abi-etl-queue</p>
        <p><strong>Schedule:</strong> Quotidien √† 2h00 (UTC)</p>
        <p><strong>Retry Policy:</strong> 2 tentatives avec d√©lai</p>
        <p><strong>Timeout:</strong> 2 heures maximum</p>
    </div>
</body>
</html>
    """
    
    dashboard_file = Path("monitoring/dashboard.html")
    dashboard_file.parent.mkdir(exist_ok=True)
    
    with open(dashboard_file, 'w', encoding='utf-8') as f:
        f.write(dashboard_html)
    
    print(f"‚úÖ Tableau de bord cr√©√©: {dashboard_file}")
    return dashboard_file

def main():
    """Fonction principale de configuration"""
    print("üöÄ Configuration de Prefect pour le pipeline ETL ABI")
    print("=" * 60)
    
    # √âtape 1: Installation
    if not install_prefect():
        return False
    
    # √âtape 2: Configuration de l'espace de travail
    if not setup_prefect_workspace():
        return False
    
    # √âtape 3: Cr√©ation de la configuration de d√©ploiement
    create_deployment_config()
    
    # √âtape 4: Cr√©ation du tableau de bord
    dashboard_file = create_monitoring_dashboard()
    
    print("\n" + "=" * 60)
    print("‚úÖ Configuration Prefect termin√©e avec succ√®s!")
    print("\nüìã Prochaines √©tapes:")
    print("1. D√©marrer le serveur Prefect:")
    print("   prefect server start")
    print("\n2. Dans un nouveau terminal, d√©marrer un worker:")
    print("   prefect worker start --pool default-agent-pool")
    print("\n3. Tester le pipeline:")
    print("   python -m flows.prefect_etl_flows")
    print("\n4. Ouvrir le tableau de bord:")
    print(f"   {dashboard_file.resolve()}")
    print("\n5. Acc√©der √† Prefect UI:")
    print("   http://127.0.0.1:4200")
    
    return True

if __name__ == "__main__":
    main()
